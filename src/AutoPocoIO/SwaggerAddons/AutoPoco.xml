<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoPocoIO</name>
    </assembly>
    <members>
        <member name="T:AutoPocoIO.Api.ISchemaOperations">
            <summary>
            API for access database schema structure.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ISchemaOperations.Definition(System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get schema structure.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns>Lists of all tables, views, and stored procedures.</returns>
        </member>
        <member name="T:AutoPocoIO.Api.IStoredProcedureOperations">
            <summary>
             API for accessings stored procedures.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get procedure parameters.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get detailed information about a specific parameter
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameterName">Name of parameter.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.ExecuteNoParameters(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute a stored procedure that uses no parameters
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Execute(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute a stored proecedure from webapi.  
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameters">Json representation of the parameters.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Execute``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute web api from a view model 
            </summary>
            <typeparam name="TViewModel">Model of stored procedure parameters</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameters">View model mapped parameters</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Api.ITableOperations">
            <summary>
            Dynamicly access database tables
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.CreateNewRow(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">JSON object to insert</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>An instance of the object inserted</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.CreateNewRow``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Insert a recored into a given table
            </summary>
            <typeparam name="TViewModel">Type of view model</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">Object to insert into <paramref name="tableName"/></param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>An instance of the object inserted. </returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
             Describes the table and includes list of columns that exists in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>A description of <paramref name="tableName"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            View column attirbutes
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="columnName">Name of the column in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Column attributes</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.DeleteRow(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key(s)</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The removed object</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get all records from <paramref name="tableName"/>. Intended for WebAPI controller requests.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Optional. Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results and the connector max.</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get all records from <paramref name="tableName"/> and projects the to a view model. Intended to be used as the initial part of a linq query.
            </summary>
            <typeparam name="TViewModel">Type to project the results to.</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>IQueryable of <typeparamref name="TViewModel"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetById(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieves a single record from a table by Primary Key. Note: for composite PKs,
            use a semicolon separated string.
            </summary>
            <param name="connectorName">The name of the connector to the table's schema.</param>
            <param name="tableName">The name of the table to retrieve the record from.</param>
            <param name="id">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="loggingService">LoggingService object to log the request. Null by default if no logging is required.</param>
            <returns>The record with matching PK. Null if not found.</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetById``1(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieves a single record from a table by Primary Key. Note: for composite PKs,
            use a semicolon separated string.
            </summary>
            <typeparam name="TViewModel">View Model Type</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.UpdateRow(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="keys">Primary key(s)</param>
            <param name="value">JSON object to update</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The updated object</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.UpdateRow``1(System.String,System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key(s)</param>
            <param name="value">Object to updated in <paramref name="tableName"/></param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The updated object</returns>
        </member>
        <member name="T:AutoPocoIO.Api.IViewOperations">
            <summary>
            Dynamicly access database views
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results</returns>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view and project them to <typeparamref name="TViewModel"/>
            </summary>
            <typeparam name="TViewModel">Type to project the results to.</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>IQueryable of <typeparamref name="TViewModel"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAllAndRecordLimit(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results and the connector max.</returns>
        </member>
        <member name="T:AutoPocoIO.Api.SchemaOperations">
            <summary>
            View all schema objects
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.SchemaOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize schema operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
        </member>
        <member name="M:AutoPocoIO.Api.SchemaOperations.Definition(System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.StoredProcedureOperations">
            <summary>
             API for accessings stored procedures.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize store procedure operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector</param>
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.ExecuteNoParameters(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Execute(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Execute``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.TableOperations">
            <summary>
            Dynamicly access database tables
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.#ctor(AutoPocoIO.Factories.IResourceFactory,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Initialize table operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
            <param name="requestQuery">Get query string information for odata operations.</param>
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetById(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetById``1(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.CreateNewRow(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.CreateNewRow``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.UpdateRow(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.UpdateRow``1(System.String,System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.DeleteRow(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.ViewOperations">
            <summary>
            Dynamicly access database views
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize view operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAllAndRecordLimit(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.AutoPocoConstants">
            <summary>
            Application constants
            </summary>
        </member>
        <member name="T:AutoPocoIO.AutoPocoConstants.DefaultConnectors">
            <summary>
            Connector name defaults for migrations.
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultConnectors.AppDB">
            <summary>
            Application database name.
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultConnectors.Logging">
            <summary>
            Log database connector name.
            </summary>
        </member>
        <member name="T:AutoPocoIO.AutoPocoConstants.DefaultTables">
            <summary>
            Table name defaults for migrations.
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultTables.Connectors">
            <summary>
            Connector table name
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultTables.RequestLogs">
            <summary>
            Request table name
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultTables.ResponseLogs">
            <summary>
            Response log table name.
            </summary>
        </member>
        <member name="F:AutoPocoIO.AutoPocoConstants.DefaultTables.UserJoins">
            <summary>
            User join table name.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Constants.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ApplicationIdMustBeGuid">
            <summary>
              Looks up a localized string similar to DashboardAppId is required and must be a GUID string..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ApplicationIdNotFound">
            <summary>
              Looks up a localized string similar to Error finding Application Id..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.AssemblyFoundWithNoTypes">
            <summary>
              Looks up a localized string similar to Assemblies found with no types loaded..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.CharToDbObjecType">
            <summary>
              Looks up a localized string similar to Parameter excpected to be &quot;U&quot; or &quot;V&quot;.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbAdapterNotFound">
            <summary>
              Looks up a localized string similar to The DbAdapter type requested is not found..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbObjectType">
            <summary>
              Looks up a localized string similar to Db object type must be a Table or View..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbTypeNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a {0} database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DependencyResolverMissing">
            <summary>
              Looks up a localized string similar to Configuration missing dependency resolver. Use an overload with service collection..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.HierarchyIdNotSupported">
            <summary>
              Looks up a localized string similar to EF Core does not support HierarchyId types yet..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.InvalidSqlDataType">
            <summary>
              Looks up a localized string similar to Invalid Sql Data Type..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.LoadDashboardCss">
            <summary>
              Looks up a localized string similar to Could not load manifest resource stream..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.MiddlewarePath">
            <summary>
              Looks up a localized string similar to Middleware path must start with a &apos;/&apos; followed by one or more characters..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.MySqlNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a MySQL database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.NoDbTypesRegistered">
            <summary>
              Looks up a localized string similar to No database types registered. Setup at least one database type in startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.OracleNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a Oracle database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ServiceNotRegistered">
            <summary>
              Looks up a localized string similar to The requested service was not registered in startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.SqlNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a SQL database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.TypeNotSequence">
            <summary>
              Looks up a localized string similar to Type not a sequence..
            </summary>
        </member>
        <member name="T:AutoPocoIO.Constants.HttpMethodType">
            <summary>
            Http operations to be logged
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.GET">
            <summary>
            GET data operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.POST">
            <summary>
            Insert operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.PUT">
            <summary>
            Update operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.DELETE">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.CompoundPrimaryKeyAttribute">
            <summary>
            Associates property with as a Primary key in a database table in OData
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.CompoundPrimaryKeyAttribute.#ctor(System.Int32)">
            <summary>
            Initialize attribute with key order
            </summary>
            <param name="order">Primary key position</param>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.CompoundPrimaryKeyAttribute.Order">
            <summary>
            PK Order
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.DatabaseNameAttribute">
            <summary>
            Used by EF visit table to query across same server databases
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.DatabaseNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.DatabaseNameAttribute class
            </summary>
            <param name="databaseName">The name of the Database</param>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.DatabaseNameAttribute.DatabaseName">
            <summary>
            The name of the Database
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute">
            <summary>
            Prepend route prefix with dashboard prefix
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute.#ctor(System.String)">
            <summary>
            Sets prefix to "DashboardRoute/<paramref name="prefix"/>".
            </summary>
            <param name="prefix">Route Prefix</param>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute.Prefix">
            <summary>
            Route prefix with dashboard path prepended.
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute">
            <summary>
            Specifies the referenced Database Object of a property
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.DbName">
            <summary>
            Database name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.SchemaName">
            <summary>
            Schema name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.TableName">
            <summary>
            Table name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.ColumnName">
            <summary>
            Column name (if referenced object is a column, null otherwise) of the referenced database object
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.ReferencedDbObjectAttribute class (use when referenced object is a table, not a specific column)
            </summary>
            <param name="dbName">Database name of the referenced database object</param>
            <param name="schemaName">Schema name of the referenced database object</param>
            <param name="tableName">Table name of the referenced database object</param>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.ReferencedDbObjectAttribute class (use when referenced object is a specific column)
            </summary>
            <param name="dbName">Database name of the referenced database object</param>
            <param name="schemaName">Schema name of the referenced database object</param>
            <param name="tableName">Table name of the referenced database object</param>
            <param name="columnName">Column name of the referenced database object</param>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.UseOdataInSwaggerAttribute">
            <summary>
            Flag for swagger to add Odata standard filters.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Dashboard.DashboardRoutes">
            <summary>
            Define routes with middleware dispatchers.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.DashboardRoutes.Routes">
            <summary>
            Routes for middleware dashboard.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.DashboardRoutes.#ctor">
            <summary>
            Initialize Routes.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Dashboard.DashboardServiceProvider">
            <summary>
            Internal dashboard scoped services.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.DashboardServiceProvider.#ctor">
            <summary>
            Initalize service provider.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.DashboardServiceProvider.Instance">
            <summary>
            Get a single static instance of the service provider
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.DashboardServiceProvider.GetServiceProvider(System.IServiceProvider)">
            <summary>
            Register services if this is the first time using the middleware
            </summary>
            <param name="rootProvider">Application root provider</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Extensions.ModelExtensions">
            <summary>
            Dashboard model extensions
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Extensions.ModelExtensions.FindValue``1(System.Collections.Generic.IDictionary{System.String,System.String[]},System.String)">
            <summary>
            Get value from form values
            </summary>
            <typeparam name="TProperty">Expected property type</typeparam>
            <param name="form">Form values</param>
            <param name="key">Form property name</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Extensions.ModelExtensions.GetString(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Get string value from Regex match
            </summary>
            <param name="match">Regex match</param>
            <param name="key">Group to parse to string</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.IRazorForm">
            <summary>
            Page containing a form.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.IRazorForm.SetForm(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Read request form and set to dictionary
            </summary>
            <param name="values">Result dictionary</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.IRazorForm.Save">
            <summary>
            Execute command.
            </summary>
            <returns>Result dispatcher.</returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Pages.ConnectorForm">
            <summary>
            Connector form page.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorForm.#ctor(AutoPocoIO.Dashboard.Repos.IConnectorRepo,AutoPocoIO.Middleware.ILayoutPage)">
            <summary>
            Initialize Connector page.
            </summary>
            <param name="repo">Database access.</param>
            <param name="layout">Unified layout.</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorForm.Save">
            <summary>
            Add or Update a connector.
            </summary>
            <returns>Redirect to edit page or display errors.</returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorForm.GetById(System.String)">
            <summary>
            Get connector by id and set viewbag
            </summary>
            <param name="id">Connector id</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorForm.SetForm(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorForm.NewConnector">
            <summary>
            Create new connector and set view bag
            </summary>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Pages.ConnectorsPage">
            <summary>
            Connector list page.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorsPage.#ctor(AutoPocoIO.Dashboard.Repos.IConnectorRepo,AutoPocoIO.Middleware.ILayoutPage)">
            <summary>
            Initialize Connector page.
            </summary>
            <param name="repo">Database access.</param>
            <param name="layout">Unified layout.</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorsPage.ListConnectors">
            <summary>
            Get all connectors and set viewbag
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.ConnectorsPage.Delete(System.String)">
            <summary>
            Remove connector
            </summary>
            <param name="id">Connector Id</param>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Pages.RequestHistoryPage">
            <summary>
            Reqeust list page.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.RequestHistoryPage.#ctor(AutoPocoIO.Dashboard.Repos.IRequestHistoryRepo,AutoPocoIO.Middleware.ILayoutPage)">
            <summary>
            Initialize request page.
            </summary>
            <param name="requestHistoryRepo">Database access.</param>
            <param name="layout">Unified layout.</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Pages.RequestHistoryPage.ListRequests">
            <summary>
            Set last 50 requests to the view bag.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.ListConnectors">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.ConnectorCount">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Save(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.GetById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Insert(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Validate(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.IConnectorRepo">
            <summary>
            CRUD operations for connectors in the dashboard
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.ConnectorCount">
            <summary>
            Total number of registered connectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.ListConnectors">
            <summary>
            List of connector information
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Save(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <summary>
            Update a connector
            </summary>
            <param name="model">Values to update connector.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.GetById(System.String)">
            <summary>
            Get a single connector
            </summary>
            <param name="id">Connector Id</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Insert(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <summary>
            Insert a connector.
            </summary>
            <param name="model">Values to create a connector.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Validate(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Validate connector values on Insert/Update
            </summary>
            <param name="model">Values to validate</param>
            <param name="errors">Error dictionary to display</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Delete(System.String)">
            <summary>
            Remove connector.
            </summary>
            <param name="id">Connector Id to remove.</param>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.IRequestHistoryRepo">
            <summary>
            Get information about request logs.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IRequestHistoryRepo.ListRequest(System.Int32)">
            <summary>
            List requests information starting with the most recent.
            </summary>
            <param name="recordLimit">Number of records to return.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo">
            <summary>
             Get information about request logs.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo.#ctor(System.IServiceProvider,AutoPocoIO.Services.ITimeProvider)">
            <summary>
            Initialize repository.
            </summary>
            <param name="provider">Middleware scoped provider.</param>
            <param name="timeProvider">Server time information.</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo.ListRequest(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel">
            <summary>
            Connector details.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.Id">
            <summary>
            Unique connector id.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.Name">
            <summary>
            Friendly name for connector.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.ResourceType">
            <summary>
            Database type.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.Schema">
            <summary>
            Database schmea.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.ConnectionStringDecrypted">
            <summary>
            Decrypted connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.ConnectionString">
            <summary>
            Encrypted connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.RecordLimit">
            <summary>
            WebApi return limit.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.UserId">
            <summary>
            Database access user.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.Password">
            <summary>
            Database access password.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.InitialCatalog">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.DataSource">
            <summary>
            Server path.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.Port">
            <summary>
            Port number (if applicable).
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel.IsActive">
            <summary>
            Enable/Disable connector usage.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel">
            <summary>
            Display information about recent requests.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.RequestGuid">
            <summary>
            Unique identifier for request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.DateTimeUtc">
            <summary>
            Time of request in GMT
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.RequestType">
            <summary>
            Http request method
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.Connector">
            <summary>
            Name of used connector
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.Status">
            <summary>
            Http response status
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.Requester">
            <summary>
            Who is making the request
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.Resource">
            <summary>
            Database object name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.ViewModels.RequestGridViewModel.ResourceId">
            <summary>
            Database Primary key (if applicable)
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.DbContextBase">
            <summary>
            Dynamic schema context
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbContextBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Set up Virtual Entity relationships, Compund PKs and create Entity methods
            </summary>
            <param name="modelBuilder">Builder to add relationships to in this context</param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.DbSchema">
            <summary>
            Schema definition at request time
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.#ctor">
            <summary>
            Initalize schmea definition lists.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Tables">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Columns">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Views">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.StoredProcedures">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.GetHashCode">
            <summary>
            Overall hash code for the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.Reset">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase">
            <summary>
            Base class to populate schema information
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.#ctor(AutoPocoIO.DynamicSchema.Models.Config,AutoPocoIO.DynamicSchema.Db.IDbSchema,AutoPocoIO.DynamicSchema.Util.IDbTypeMapper)">
            <summary>
            Initalize schmea builder
            </summary>
            <param name="config">Resource configuration</param>
            <param name="dbSchema">Schmea infomration to populate</param>
            <param name="typeMapper">How to map db types to c# types</param>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.BuildColumnsCommand(System.Data.IDbConnection)">
            <summary>
            Create command to get column information.
            </summary>
            <param name="dbConnection">Database to pull the information from.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.BuildStoredProcedureCommand(System.Data.IDbConnection)">
            <summary>
            Create command to get stored procedure information.
            </summary>
            <param name="dbConnection">Database to pull the information from.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.BuildTablesViewsCommand(System.Data.IDbConnection)">
            <summary>
            Create command to get table and view information.
            </summary>
            <param name="dbConnection">Database to pull the information from.</param>
            <returns></returns>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.ResourceType">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.CreateConnection">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.CreateConnection(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.CreateDbContextOptions">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.Config">
            <summary>
            Resource configuration
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.ExecuteSchemaCommand(System.Data.IDbCommand)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.GetColumns">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.GetStoredProcedures">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.GetTableViews">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchemaBuilderBase.AddFKColumn(System.Data.DataRow,AutoPocoIO.DynamicSchema.Models.Column)">
            <summary>
            Add Foriegn key information to the column
            </summary>
            <param name="row">Result row from database</param>
            <param name="column">Target column</param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.IDbAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Instance">
            <summary>
            Database instance
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbAdapter.DbSetEntityType">
            <summary>
            Type of requested database object
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Add(System.Object)">
            <summary>
            Begins tracking the given entity, and any other reachable entities that are not
                already being tracked, in the <see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added"/>
               state such that they will be inserted into the database when <see cref="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Save"/>
                is called.
            </summary>
            <param name="value">The entity to add.</param>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Delete(System.Object)">
            <summary>
             Begins tracking the given entity in the<see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted"/>
             state such that it will be removed from the database when <see cref="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Save"/>
             is called.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Find(System.String,System.String)">
            <summary>
            Finds an entity with the given primary key values. If an entity with the given
                primary key values is being tracked by the context, then it is returned immediately
                without making a request to the database. Otherwise, a query is made to the database
                for an entity with the given primary key values and this entity, if found, is
                attached to the context and returned. If no entity is found, then null is returned.
            </summary>
            <param name="tableName">Table to search</param>
            <param name="keys">The values of the primary key for the entity to be found.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.FilterByKey(System.String,System.String)">
            <summary>
            Finds an entity with the given primary key values. If an entity with the given
                primary key values is being tracked by the context, then it is returned immediately
                without making a request to the database. Otherwise, a query is made to the database
                for an entity with the given primary key values and this entity, if found, is
                attached to the context and returned. If no entity is found, then null is returned.
            </summary>
            <param name="tableName">Table to search</param>
            <param name="keys">The values of the primary key for the entity to be found.</param>
            <returns>A single value but still as an <see cref="T:System.Linq.IQueryable"/> to allow for joins.</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.GetAll(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.NewInstance(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Save">
            <summary>
             Saves all changes made in this context to the database.
            </summary>
            <returns> The number of state entries written to the database.</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.CreateDbCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.SetupDataContext(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.GetWithoutContext(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="outerTableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.Update(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbAdapter.FilterById``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.IDbContextBase">
            <summary>
            A DbContext instance represents a session with the database and can be used to
                query and save instances of your entities. DbContext is a combination of the
                Unit Of Work and Repository patterns.
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbContextBase.SaveChanges">
            <summary>
             Saves all changes made in this context to the database.
            </summary>
            <returns>The number of state entries written to the database.</returns>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbContextBase.Model">
            <summary>
            The metadata about the shape of entities, the relationships between them, and how they map to the database.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.IDbSchema">
            <summary>
            Schema definition at request time
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchema.Reset">
            <summary>
            Clear <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Columns"/>, <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Tables"/>, <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Views"/>, and <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.StoredProcedures"/>
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Columns">
            <summary>
            List of found columns from all objects
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.StoredProcedures">
            <summary>
            Stored procedures found
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Tables">
            <summary>
            Tables found.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Views">
            <summary>
            Views found.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder">
            <summary>
            Populate <see cref="T:AutoPocoIO.DynamicSchema.Db.IDbSchema"/> with current database configuration
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.ResourceType">
            <summary>
            Expected database type
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.CreateConnection">
            <summary>
            Create connection from  <see cref="P:AutoPocoIO.DynamicSchema.Models.Config.ConnectionString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.CreateConnection(System.String)">
            <summary>
            Create connection from parameter
            </summary>
            <param name="connectionString">Database connection string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.CreateDbContextOptions">
            <summary>
            Create options builder with replacement services to remove caching
            </summary>
            <returns>Configured context options</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.ExecuteSchemaCommand(System.Data.IDbCommand)">
            <summary>
            Execute schema command with safe db connection
            </summary>
            <param name="command">Command to execute</param>
            <returns></returns>
            <exception cref="T:AutoPocoIO.Exceptions.OpenConnectorException"></exception>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.GetColumns">
            <summary>
            Execute column command
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.GetTableViews">
            <summary>
            Execute table and views command
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchemaBuilder.GetStoredProcedures">
            <summary>
            Execute stored procedure command
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.ISchemaInitializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaInitializer.Initilize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaInitializer.ConfigureAction(AutoPocoIO.Models.Connector,AutoPocoIO.DynamicSchema.Enums.OperationType)">
            <summary>
            
            </summary>
            <param name="connector"></param>
            <param name="dbAction"></param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.ISchemaQueries">
            <summary>
            Methods to pull query for schema information from a database
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildColumns">
            <summary>
            List all requested database tables, views, and columns.
            </summary>
            <returns>string database query for tables, views, and columns.</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildStoredProcedureCommand">
            <summary>
            List all stored procedures
            </summary>
            <returns>string database query for stored procedures</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildTablesViewCommand">
            <summary>
            List all requested database tables, views.
            </summary>
            <returns>string database query for tables, views.</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Enums.DBOjectType">
            <summary>
            Database object types
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.DBOjectType.Table">
            <summary>
            Database table
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.DBOjectType.View">
            <summary>
            Database view
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.DBOjectType.SProc">
            <summary>
            Database stored procedure
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Enums.OperationType">
            <summary>
            Db interaction types
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.OperationType.read">
            <summary>
            Read operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.OperationType.write">
            <summary>
            Write operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.OperationType.delete">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.OperationType.Any">
            <summary>
            Schema operation
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Enums.ResourceType">
            <summary>
            Database Types
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.ResourceType.None">
            <summary>
            None provide
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.ResourceType.Mssql">
            <summary>
            Microsoft Sql Server
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.ResourceType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.ResourceType.Ldap">
            <summary>
            Active directory
            </summary>
        </member>
        <member name="F:AutoPocoIO.DynamicSchema.Enums.ResourceType.Mysql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Column">
            <summary>
            Details about a database column 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.Table">
            <summary>
            Parent table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.View">
            <summary>
            Parent view
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.TableSchema">
            <summary>
            Database schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.TableName">
            <summary>
            Database object name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnType">
            <summary>
            Data type
            </summary>
            <example>Varchar</example>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnLength">
            <summary>
            Data length
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnIsNullable">
            <summary>
            Does the column allow nulls
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsComputed">
            <summary>
            Is the column a computed column
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKName">
            <summary>
            Name of the primary key, if the column is the primary key. 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKPosition">
            <summary>
            Primary key order
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKIsIdentity">
            <summary>
            Is the database responsible for creating the value on insert
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.FKName">
            <summary>
            Name of the forign key, if the column is referenced by another table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedDatabase">
            <summary>
            Database of the forign keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedSchema">
            <summary>
            Schema of the forgien keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedTable">
            <summary>
            Name of the forgien keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedColumn">
            <summary>
            Name of the column forgien keyed 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.UserDefinedFKAlias">
            <summary>
            Forgien key name if defiend in the dashboard
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.DataType">
            <summary>
            Database and c# datatypes
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsPK">
            <summary>
            Flag denoting if the column the Primary key
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsFK">
            <summary>
            Flag denoting if the column is a forgien key
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.Browsable">
            <summary>
            Flag the column to add the Browsable attribute
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedVariableName">
            <summary>
            Full name of the forigen keyed table
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Column.ToString">
            <summary>
              A string that represents the current object.
            </summary>
            <returns>Column Name</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Column.GetHashCode">
            <summary>
            Combined hash codes of Schema, Table, Column and ColumnType
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Config">
            <summary>
            Configuration settings for dynamically pulling DB objects
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Config.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.FilterSchema">
            <summary>
            Target schema.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedTable">
            <summary>
            Target table.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedStoredProcedure">
            <summary>
            Target stored procedure.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.ConnectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.PropertyPreFixName">
            <summary>
            Additional column prefix
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UserDefinedJoins">
            <summary>
            User created joins
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.DatabaseConnectorName">
            <summary>
            Connector name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.JoinsAsString">
            <summary>
            Formated user joins and virtual entity joins for schema call.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UsedConnectors">
            <summary>
            All connectors used to call database object.  Used to link cross database calls.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.DataType">
            <summary>
            Combine the Database type and the C# type
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DataType.DbType">
            <summary>
            Database Type
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DataType.SystemType">
            <summary>
            C# Type
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.DataType.ToString">
            <summary>
            Display both types
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.DBParameter">
            <summary>
            Stored procedure details.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DBParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DBParameter.Type">
            <summary>
            Database type.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DBParameter.IsOutput">
            <summary>
            Flag if the parameter is Out or InOut
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DBParameter.IsNullable">
            <summary>
            Does the parameter allow nulls.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.PocoBase">
            <summary>
            Base type for all dynamically generated database models
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.PocoBase.ToString">
            <summary>
            Cleanly show table name
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="E:AutoPocoIO.DynamicSchema.Models.PocoBase.PropertyChanged">
            <summary>
            Event delegate to show changers
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.PocoBase.OnRaisePropertyChanged(System.Object,System.String)">
            <summary>
            Raise the on change event
            </summary>
            <param name="sender">Dbcontext</param>
            <param name="PropertyName">Column name</param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.StoredProcedure">
            <summary>
            Stored procedure details
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.StoredProcedure.#ctor">
            <summary>
            Initialize parameter list.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.StoredProcedure.Name">
            <summary>
            Procedure name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.StoredProcedure.Parameters">
            <summary>
            List of parameters.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.StoredProcedure.Schema">
            <summary>
            Database schema
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.StoredProcedure.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Table">
            <summary>
            Table details
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Table.#ctor">
            <summary>
            Initialize table column list.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.Schema">
            <summary>
            Database schema
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.Name">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.PrimaryKeys">
            <summary>
            Table primary keys
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.Columns">
            <summary>
            List of table columns
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.VariableName">
            <summary>
            Combine table database, schema and name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Table.TableAttributeName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Table.ToString">
            <summary>
            Name of table
            </summary>
            <returns>Variable name</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Table.GetHashCode">
            <summary>
            Orderd has of columns
            </summary>
            <returns>An order independent hash.</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.View">
            <summary>
            Created for clarity
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Services.CrossDb.RelationalQueryModelVisitor">
            <summary>
                The default relational <see cref="T:Remotion.Linq.QueryModel" /> visitor.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Util.EncryptDecrypt">
            <summary>
            Encrypt or decrpt strings with SHA256
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Util.EncryptDecrypt.EncryptString(System.String)">
            <summary>
            Encrypt connection
            </summary>
            <param name="plainText">Connection text</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Util.EncryptDecrypt.DecryptString(System.String)">
            <summary>
            Decrypt connection
            </summary>
            <param name="cipherText">Encypted text</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Exceptions.BaseCaughtException">
            <summary>
            Base exception to show in logger
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.BaseCaughtException.#ctor">
            <summary>
            Initialize exception with 500 status code
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.BaseCaughtException.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initialize exception with custom status code 
            </summary>
            <param name="httpStatus">Exception resonse code</param>
        </member>
        <member name="P:AutoPocoIO.Exceptions.BaseCaughtException.ResponseCode">
            <summary>
            Http Status code
            </summary>
        </member>
        <member name="P:AutoPocoIO.Exceptions.BaseCaughtException.HttpErrorMessage">
            <summary>
            Short error message to explain status. Default is <c>"InternalServerError"</c>
            </summary>
        </member>
        <member name="T:AutoPocoIO.Exceptions.Check">
            <summary>
            Check if values are null/empty
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.Check.NotNull``1(``0,System.String)">
            <summary>
            Throw an excpetion if value is not null.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
            <param name="value">Parameter to check</param>
            <param name="parameterName">Parameter name</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AutoPocoIO.Exceptions.Check.NotEmpty(System.String,System.String)">
            <summary>
            Throw an exception if value is null or empty.
            </summary>
            <param name="value">Value to check.</param>
            <param name="parameterName">Method parameter name.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Exceptions.ConnectorNotFoundException">
            <summary>
            Exception that sets status to 400 (Bad Request)
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.ConnectorNotFoundException.#ctor(System.String)">
            <summary>
            Initialize exception with connector name
            </summary>
            <param name="name">Connector name</param>
        </member>
        <member name="M:AutoPocoIO.Exceptions.ConnectorNotFoundException.#ctor(System.Int32)">
            <summary>
            Initialize exception with connector id
            </summary>
            <param name="id">Connector id</param>
        </member>
        <member name="P:AutoPocoIO.Exceptions.ConnectorNotFoundException.Message">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Exceptions.ConnectorNotFoundException.HttpErrorMessage">
            <summary>
            Status message is <c>ConnectorNotFound</c>
            </summary>
        </member>
        <member name="T:AutoPocoIO.Exceptions.NoPrimaryKeyFoundException">
            <summary>
            Exception that sets status to 500 (Sever Error)
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.NoPrimaryKeyFoundException.#ctor(System.String)">
            <summary>
             Initialize exception with entity name
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="P:AutoPocoIO.Exceptions.NoPrimaryKeyFoundException.Message">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Exceptions.NoPrimaryKeyFoundException.HttpErrorMessage">
            <summary>
            Status message is <c>EntityKeyNotFound</c>
            </summary>
        </member>
        <member name="T:AutoPocoIO.Exceptions.TableNotFoundException">
            <summary>
            Exception that sets status to 500 (Server Error)
            </summary>
        </member>
        <member name="M:AutoPocoIO.Exceptions.TableNotFoundException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize exception table information
            </summary>
            <param name="databaseName"></param>
            <param name="schemaName"></param>
            <param name="tableName"></param>
        </member>
        <member name="P:AutoPocoIO.Exceptions.TableNotFoundException.Message">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Exceptions.TableNotFoundException.HttpErrorMessage">
            <summary>
            Status message is <c>TableNotFound</c>
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.DynamicObjectExtensions.GroupJoin``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0},System.String,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T">dynamic list</typeparam>
            <param name="outer">outer side of the join</param>
            <param name="inner">inner side of the join</param>
            <param name="outerSelector">key value to join on. Example 1: outer.id, Example 2: new(outer.id, outer.name) </param>
            <param name="innerSelector">key value to join on. Example 1: inner.id, Example 2: new(inner.id, inner.name)</param>
            <param name="resultsSelector">How to display results. Example : new(group as Address, outer.name as Homeowner)</param>
            <param name="values">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ResourceExtensions.ProjectResultSet``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Maps a result set to a view model
            </summary>
            <typeparam name="TViewModel">View Model type</typeparam>
            <param name="outputParameters">Output from the stored procedure execution.</param>
            <param name="parameterName">Name of the parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is not found or not a result set.</exception>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.SchemaBuilderExtensions.SetObjectType(System.String)">
             <summary>
             Convert db result to DbObject Enum
             </summary>
             <param name="objectType">string value from Db</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
             <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ServiceCollectionExtensions.ConfigureApplicationDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Used for provider specific configuration.
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ServiceCollectionExtensions.AddAutoPoco(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the minimum essential AutoPoco services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ServiceCollectionExtensions.AddAutoPocoWebApiEndPoints(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers default <see cref="T:System.Web.Http.ApiController"/> with minimum AutoPoco services
            </summary>
            <param name="services"> The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.AppBuilderExtensions">
            <summary>
            Owin set up dashboard
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Owin.IAppBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})">
            <summary>
            Default dashboard set up for with default settings
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <param name="descriptors">List of services to register with the AutoPocoIO IOC container.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Owin.IAppBuilder,AutoPocoIO.Models.AutoPocoOptions,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})">
            <summary>
            Default dashboard set up for with default settings
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <param name="options">Dashboard setup options</param>
            <param name="descriptors">List of services to register with the AutoPocoIO IOC container.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Owin.IAppBuilder,System.Web.Http.HttpConfiguration)">
            <summary>
            Default dashboard set up for with default settings
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <param name="config">Current Httpconfiguration with IOC container</param>
            <returns>The options builder so that further configuration can be chained.</returns>
            <exception cref="T:System.ArgumentException">This must have an IOC container registered</exception>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Owin.IAppBuilder,System.Web.Http.HttpConfiguration,AutoPocoIO.Models.AutoPocoOptions)">
            <summary>
            Set up dashboard with a basic license
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <param name="options">Dashboard setup options</param>
            <param name="config">Current Httpconfiguration</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.DependencyResolverExtensions">
            <summary>
            Add GetRequiredService to <see cref="T:System.Web.Http.Dependencies.IDependencyResolver"/>
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.DependencyResolverExtensions.GetRequiredService``1(System.Web.Http.Dependencies.IDependencyResolver)">
            <summary>
            Get a service from dependency resolver
            </summary>
            <typeparam name="T">Type of services</typeparam>
            <param name="dependencyResolver">Config resolver</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.RouteExtensions">
            <summary>
            Http Route extensions
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.RouteExtensions.GetQueryStrings(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets HttpRequest query string values for WebAPi
            </summary>
            <param name="request">Current Http Request</param>
            <returns>Key/Value pair of query strings</returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.RouteExtensions.GetQueryStrings(System.Web.HttpRequest)">
            <summary>
            Gets HttpRequest query string values for MVC
            </summary>
            <param name="request">Current Http Request</param>
            <returns>Key/Value pair of query strings</returns>
        </member>
        <member name="T:AutoPocoIO.Factories.ConnectionStringFactory">
            <summary>
            Parse connection string from registered <see cref="T:AutoPocoIO.Resources.IConnectionStringBuilder"/>
            </summary>
        </member>
        <member name="M:AutoPocoIO.Factories.ConnectionStringFactory.#ctor(System.Collections.Generic.IEnumerable{AutoPocoIO.Resources.IConnectionStringBuilder})">
            <summary>
            Initialize factory with registered <see cref="T:AutoPocoIO.Resources.IConnectionStringBuilder"/>
            </summary>
            <param name="builders"></param>
        </member>
        <member name="M:AutoPocoIO.Factories.ConnectionStringFactory.GetConnectionInformation(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Factories.ConnectionStringFactory.CreateConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,AutoPocoIO.Resources.ConnectionInformation)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Factories.ConnectionStringFactory.GetConnectionInformation(System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Factories.ConnectionStringFactory.CreateConnectionString(System.Int32,AutoPocoIO.Resources.ConnectionInformation)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Factories.IConnectionStringFactory">
            <summary>
            Generate connection string from registered <see cref="T:AutoPocoIO.Resources.IConnectionStringBuilder"/>
            </summary>
        </member>
        <member name="M:AutoPocoIO.Factories.IConnectionStringFactory.CreateConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,AutoPocoIO.Resources.ConnectionInformation)">
            <summary>
            Combine connection information to create a connection string base on database type
            </summary>
            <param name="database">Database used to look up type</param>
            <param name="connectionInformation">Values for createing a connection string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Factories.IConnectionStringFactory.CreateConnectionString(System.Int32,AutoPocoIO.Resources.ConnectionInformation)">
            <summary>
            Combine connection information to create a connection string base on resource type
            </summary>
            <param name="resourceType">Database type</param>
            <param name="connectionInformation">Values for createing a connection string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Factories.IConnectionStringFactory.GetConnectionInformation(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
            Parse connection string based on database type
            </summary>
            <param name="database">Database used to look up type and connection string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Factories.IConnectionStringFactory.GetConnectionInformation(System.Int32,System.String)">
            <summary>
            Parse connection string based on database type
            </summary>
            <param name="resourceType">Database type</param>
            <param name="connectionString">Value to parse</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareContext">
            <summary>
             Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.Request">
            <summary>
            Http request information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.Response">
            <summary>
            Http response information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.UriMatch">
            <summary>
            Regex match to dispatcher
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.RequestUri">
            <summary>
            Request uri
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.QueryStrings">
            <summary>
            Request query strings
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.InternalServiceProvider">
            <summary>
            Scoped middleware service provider
            </summary>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareRequest">
            <summary>
            Represents the incoming side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Method">
            <summary>
            Gets the HTTP method.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Path">
            <summary>
             Gets the request path from RequestPath.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.PathBase">
            <summary>
             Gets the RequestPathBase.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.LocalIpAddress">
            <summary>
            Gets the request local IP address
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.RemoteIpAddress">
            <summary>
            Gets the request remote IP address
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareRequest.GetQuery(System.String)">
            <summary>
             Gets the query value collection parsed from Request QueryString
            </summary>
            <param name="key">The query string key to search for</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareRequest.ReadFormAsync">
            <summary>
            Reads the request body if it is a form.
            </summary>
            <returns>Key/Value pair of the form values</returns>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.RequestUri">
             <summary>
            Returns the combined components of the request URL in a fully escaped form suitable
            for use in HTTP headers and other HTTP operations.
             </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Body">
            <summary>
             Gets the RequestBody Stream.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.ContentType">
            <summary>
            Gets or sets the value for the Content-Type response header.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.StatusCode">
            <summary>
            Gets or sets the HTTP response code.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.Body">
            <summary>
            Gets or sets the response body <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.SetExpire(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set <c>"Expires"</c> key in header dictionary
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.WriteAsync(System.String)">
            <summary>
             Writes the given text to the response body. UTF-8 encoding will be used.
            </summary>
            <param name="text">The text to write to the response.</param>
            <returns>A task that represents the completion of the write operation.</returns>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.Redirect(System.String)">
            <summary>
             Returns a temporary redirect response (HTTP 302) to the client.
            </summary>
            <param name="location"> The URL to redirect the client to. This must be properly encoded for use in http
                headers where only ASCII characters are allowed.</param>
        </member>
        <member name="T:AutoPocoIO.Models.AutoPocoOptions">
            <summary>
            Middileware set up options
            </summary>
        </member>
        <member name="M:AutoPocoIO.Models.AutoPocoOptions.#ctor">
            <summary>
            Default set up.
            UseDashboard = true.
            DashboardPath = "/autopoco".
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.AutoPocoOptions.DashboardPath">
            <summary>
            Route for dashboard.  DEfaults to /autopoco
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.AutoPocoOptions.UseDashboard">
            <summary>
            Flag to enable dashboard middleware. True by defaut.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.ColumnDefinition">
            <summary>
            Database column information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Name">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Type">
            <summary>
            Database type
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Length">
            <summary>
            Max length of the column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsNullable">
            <summary>
            Does the column allow null values
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsPrimaryKey">
            <summary>
            Is the column the primary key or one of the primary keys
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsForigenKey">
            <summary>
            Is attached to a forigen key constrant
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedDatabase">
            <summary>
            Forigen key table's database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedSchema">
            <summary>
            Forigen key table's schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedTable">
            <summary>
            Forigen key table name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedColumn">
            <summary>
            Forigen key column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsComputed">
            <summary>
            Is the column definition a computed column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsPrimaryKeyIdentity">
            <summary>
            Flag to specify that the column is a primary key identiy column
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.Connector">
            <summary>
            Connector details.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Models.Connector.#ctor">
            <summary>
            Initialize connector with unique identifier.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.Id">
            <summary>
            Unique connector id.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.Name">
            <summary>
            Friendly name for connector.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.ResourceType">
            <summary>
            Database type.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.Schema">
            <summary>
            Database schmea.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.ConnectionString">
            <summary>
            Encrypted connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.ConnectionStringDecrypted">
            <summary>
            Decrypted connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.RecordLimit">
            <summary>
            WebApi return limit.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.UserId">
            <summary>
            Database access user.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.InitialCatalog">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.DataSource">
            <summary>
            Server path.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.Port">
            <summary>
            Port number (if applicable).
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.Connector.IsActive">
            <summary>
            Enable/Disable connector usage.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.SchemaDefinition">
            <summary>
            Information about the database schema
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.ConnectorId">
            <summary>
            Database id for the connector
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.ConnectorName">
            <summary>
            Alias of the connector
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Name">
            <summary>
            Schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.DbName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Tables">
            <summary>
            List of available table names
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Views">
            <summary>
            List of available view names
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.StoredProcedures">
            <summary>
            List of available stored procedure names
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.StoredProcedureDefinition">
            <summary>
            Information about a given stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureDefinition.Name">
            <summary>
            Store procedure name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureDefinition.Parameters">
            <summary>
            List of stored procedure parameter definitions
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.StoredProcedureParameterDefinition">
            <summary>
            Properties of a stored procedure parameter
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.Type">
            <summary>
            Database type of the parameter value
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.IsOutput">
            <summary>
            Is the parameter an output of the stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.IsNullable">
            <summary>
            Does the procedure except null as a value
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.TableDefinition">
            <summary>
            Database table information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.ConnectorId">
            <summary>
            AutoPoco connector id
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.ConnectorName">
            <summary>
            AutoPoco connector name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.SchemaName">
            <summary>
            Database schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.DbName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.Name">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.Columns">
            <summary>
            List of table column details
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.UserJoinConfiguration">
            <summary>
            Flatten User Join information
            </summary>
        </member>
        <member name="T:AutoPocoIO.Resources.IOperationResource">
            <summary>
            Dynamic database access.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DbSchema">
            <summary>
            Schema definition.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.Config">
            <summary>
            Request configuration.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.Connector">
            <summary>
            Request database connector.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DatabaseName">
            <summary>
            Requested database.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DbObjectName">
            <summary>
            Requested database object.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.SchemaName">
            <summary>
            Requested schema.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.ResourceType">
            <summary>
            Database type.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider)">
            <summary>
            Register resouce specific services.
            </summary>
            <param name="serviceCollection">Resource service collection.</param>
            <param name="rootProvider">Application service provider.</param>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ConfigureAction(AutoPocoIO.Models.Connector,AutoPocoIO.DynamicSchema.Enums.OperationType,System.String)">
            <summary>
            Configure resource operation
            </summary>
            <param name="connector">Request connector</param>
            <param name="dbAction">Operations type (read, write, delete)</param>
            <param name="dbObjectName">Database object to be accessed.</param>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.CreateNewResourceRecord``1(``0)">
            <summary>
            Insert a recored into a given table.
            </summary>
            <typeparam name="TViewModel">Type of view model</typeparam>
            <param name="value">Object to insert into <see cref="P:AutoPocoIO.Resources.IOperationResource.DbObjectName"/> </param>
            <returns>An instance of the object inserted.</returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.CreateNewResourceRecord(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="value">Object to insert into <see cref="P:AutoPocoIO.Resources.IOperationResource.DbObjectName"/> </param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.DeleteResourceRecordById(System.String)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="keys">Primary Key(s)</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ExecuteProc(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the configured stored procedure
            </summary>
            <param name="parameterDictionary">Key/Value pair of input and output parameters</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecordById(System.String)">
            <summary>
            Retrieves a single record from a table by Primary Key.
            </summary>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecordById``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Retrieves a single record from a table by Primary Key.
            </summary>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="queryString">Request query string to apply odata filters.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecords(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Retrieves all records in a table
            </summary>
            <param name="queryString">Request query string to apply odata filters.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetViewRecords">
            <summary>
            Retrieves all records in a view
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadDbAdapter">
            <summary>
            Initialize database schema for a specific object
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.UpdateResourceRecordById(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Update a single record from a table by Primary Key.
            </summary>
            <param name="value">JSON object to update.</param>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.UpdateResourceRecordById``1(``0,System.String)">
            <summary>
            Update a single record from a table by Primary Key.
            </summary>
            <typeparam name="TViewModel">Model of the table columns</typeparam>
            <param name="value">Column values to update.</param>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetColumnDefinition(System.String)">
            <summary>
            View column attirbutes
            </summary>
            <param name="columnName">Name of the column in the database.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetSchemaDefinition">
            <summary>
            List all database objects
            </summary>
            <returns>A list for each object type (Table, View, Stored Procedure)</returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetStoredProcedureDefinition">
            <summary>
            List all parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetStoredProcedureDefinition(System.String)">
            <summary>
             Get a single parameter
            </summary>
            <param name="parameterName">Parameters name in the database</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetTableDefinition">
            <summary>
            List of columns that exists in a given table
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadSchema">
            <summary>
            Load full schema
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadProc">
            <summary>
            Load schema for a specific stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.Connector">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DatabaseName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.SchemaName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DbObjectName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DbSchema">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.Config">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.ResourceType">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ConfigureAction(AutoPocoIO.Models.Connector,AutoPocoIO.DynamicSchema.Enums.OperationType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.CreateNewResourceRecord``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.CreateNewResourceRecord(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecordById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecordById``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecords(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.UpdateResourceRecordById``1(``0,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.UpdateResourceRecordById(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.DeleteResourceRecordById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetViewRecords">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ListSchemas">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetColumnDefinition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetSchemaDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetStoredProcedureDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetStoredProcedureDefinition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetTableDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadProc">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadDbAdapter">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadSchema">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.AppDatabaseSetupService.SetupEncryption(System.String,System.String,System.Int32)">
            <summary>
            Set the encryption settings
            </summary>
            <param name="encryptionSalt">Must be length 16</param>
            <param name="encryptionSecretKey">Must be 128 characters</param>
            <param name="cacheTimeoutMinutes">Length in minutes how long database configuration values stay in cache.</param>
        </member>
        <member name="T:AutoPocoIO.Services.ILoggingService">
            <summary>
            Log resource operation calls
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.LogCount">
            <summary>
            Number of operations ready to log
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.Exception">
            <summary>
            Request exception
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.StatusCode">
            <summary>
            Request status code
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.ResponseTime">
            <summary>
            UTC time of response
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.Ip">
            <summary>
            Requester's IP address
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddSchemaToLogger(System.String)">
            <summary>
            Add schema operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddSprocToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <summary>
            Add stored procedure operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored procedure name</param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <summary>
            Add table operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Table name</param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType,System.String)">
            <summary>
            Add table row operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName"></param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddViewToLogger(System.String,System.String)">
            <summary>
            Add view operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">View name</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.LogAll">
            <summary>
            Log all pending operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddContextInfomation(AutoPocoIO.LoggingMiddleware.ContextLogParameters)">
            <summary>
            Add Http request information to the service
            </summary>
            <param name="logParameters">Http request parameters to log.</param>
        </member>
        <member name="T:AutoPocoIO.Services.IRequestQueryStringService">
            <summary>
            Access Http Request query strings.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.IRequestQueryStringService.GetQueryStrings">
            <summary>
            Format request query strings.
            </summary>
            <returns>Key/Value pair of the current request's query strings.</returns>
        </member>
        <member name="T:AutoPocoIO.Services.ITimeProvider">
            <summary>
            Get server and UTC date times.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.UtcNow">
            <summary>
            UTC date and time now
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.Now">
            <summary>
            Server date and time now
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.LocalToday">
            <summary>
            Server date time at 00:00:00 UTC
            </summary>
        </member>
        <member name="T:AutoPocoIO.Services.LoggingService">
            <summary>
            Log AutoPoco commands
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.#ctor(AutoPocoIO.Services.ITimeProvider,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
             Set up new logging for a request
            This constructor is not meant to be called in code.  Used for DI. 
            </summary>
            <param name="timeProvider">Localized time provider.</param>
            <param name="scopeFactory">Create to service scope for of thread logging.</param>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.ApiRequests">
            <summary>
            List of request to be logged
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.ResponseTime">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.Ip">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.Exception">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.LogCount">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.OnLogging">
            <summary>
             Represents an event called for each api request
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.OnLogged">
            <summary>
             Represents an event called after the http request is logged 
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddViewToLogger(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddSprocToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddSchemaToLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.LogAll">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddContextInfomation(AutoPocoIO.LoggingMiddleware.ContextLogParameters)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddApiRequest(AutoPocoIO.Models.LoggingApiContextValues,System.DateTime)">
            <summary>
            Appended an API request to be logged
            </summary>
            <param name="values">Request infomation</param>
            <param name="requestTime">Time of request</param>
        </member>
        <member name="T:AutoPocoIO.Services.DefaultTimeProvider">
            <summary>
            Get server and UTC date times.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.UtcNow">
            <inheritdoc />
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.Now">
            <inheritdoc />
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.LocalToday">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Services.RequestQueryStringService">
            <summary>
            Access Http Request query strings.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.RequestQueryStringService.GetQueryStrings">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.SwaggerAddons.ODataParametersSwaggerDefinition">
            <summary>
            Adds the supported odata parameters for IQueryable endpoints 
            ONLY if no parameters are defined already.
            </summary>
        </member>
        <member name="M:AutoPocoIO.SwaggerAddons.ODataParametersSwaggerDefinition.Apply(Swashbuckle.Swagger.Operation,Swashbuckle.Swagger.SchemaRegistry,System.Web.Http.Description.ApiDescription)">
            <summary>
            Apply the filter to the operation.
            </summary>
            <param name="operation">The API operation to check.</param>
            <param name="schemaRegistry">The swagger schema registry.</param>
            <param name="apiDescription">The description of the api method.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.SchemaController">
            <summary>
            Schema Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.SchemaController.#ctor(AutoPocoIO.Api.ISchemaOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="schemaOperations">Access schema definitions operations</param>
            <param name="loggingService">Logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.SchemaController.Get(System.String)">
            <summary>
            List all database objects
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <returns>A list for each object type (Table, View, Stored Procedure)</returns>
        </member>
        <member name="T:AutoPocoIO.WebApi.StoredProcedureController">
            <summary>
            Execute Stored Procedures
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.#ctor(AutoPocoIO.Api.IStoredProcedureOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="storedProcedureOperations">Access stored procedures</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.Get(System.String,System.String)">
            <summary>
            Execute Stored Procedure (No Params)
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.Post(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Execute Stored Procedure (Params)
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
            <param name="value">JSON object of parameters.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.StoredProcedureDefinitionController">
            <summary>
            Stored Procedure Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.#ctor(AutoPocoIO.Api.IStoredProcedureOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.Get(System.String,System.String)">
            <summary>
            List all parameters
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.Get(System.String,System.String,System.String)">
            <summary>
            Get a single parameter
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
            <param name="paramName">Parameters name in the database</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.TableDefinitionController">
            <summary>
            Table Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.#ctor(AutoPocoIO.Api.ITableOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="tableOperations">Access tables</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.Get(System.String,System.String)">
            <summary>
            List of columns that exists in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.Get(System.String,System.String,System.String)">
            <summary>
            View column attirbutes
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="columnName">Name of the column in the database.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.TablesController">
            <summary>
            Table Operation End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.#ctor(AutoPocoIO.Api.ITableOperations,AutoPocoIO.Services.ILoggingService,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Default constructor
            </summary>
            <param name="tableOps">Database table operation</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
            <param name="queryStringService">Injected service to read http request information</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Get(System.String,System.String)">
            <summary>
            Retrieve data from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Get(System.String,System.String,System.String)">
            <summary>
            Retrieve single row by primary key
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary key.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Post(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">JSON object to insert</param>
            <returns>Inserted object</returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Put(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key.</param>
            <param name="value">JSON object to update.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Delete(System.String,System.String,System.String)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary key.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.WebApi.ViewsController">
            <summary>
            View Operations End Point
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.ViewsController.#ctor(AutoPocoIO.Api.IViewOperations,AutoPocoIO.Services.ILoggingService,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="viewOperations">Access view data</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
            <param name="queryStringService">Injected service to read http request information</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.ViewsController.Get(System.String,System.String)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
        </member>
        <member name="T:AutoPocoIO.LoggingMiddleware.ContextLogParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.StatusCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.RequestBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.ResponseBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware">
            <summary>
            Owin middleware for logging request and responses
            </summary>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.#ctor(AutoPocoIO.Services.ILoggingService)">
            <summary>
            Initialize middleware on request with services
            </summary>
            <param name="loggingService">Request scoped logging service</param>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.NextComponent">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.Invoke(Microsoft.Owin.IOwinContext)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.DashboardMiddleware">
            <summary>
            Handle middleware pages
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.DashboardMiddleware.#ctor(System.IServiceProvider,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Initialize instance of middleware and maps services.
            </summary>
            <param name="provider">Root service provider.</param>
            <param name="loggingService">Shared instance of logging service across the owin pipeline.</param>
        </member>
        <member name="P:AutoPocoIO.Owin.DashboardMiddleware.NextComponent">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.DashboardMiddleware.Invoke(Microsoft.Owin.IOwinContext)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.OwinMiddlewareContext">
            <summary>
            Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.IServiceProvider)">
            <summary>
            Initialize for each http request
            </summary>
            <param name="environment">Owin environment</param>
            <param name="internalProvider">Scoped middleware service provider</param>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.Environment">
            <summary>
            Owin middleware environment variables
            </summary>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.Request">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.Response">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.UriMatch">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.RequestUri">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.QueryStrings">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareContext.InternalServiceProvider">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.IOwinMiddlewareWithDI">
            <summary>
            Implmenet Owin Middlware that utilizes injected classes.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Owin.IOwinMiddlewareWithDI.NextComponent">
            <summary>
            Next middleware in the owin pipeline.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.IOwinMiddlewareWithDI.Invoke(Microsoft.Owin.IOwinContext)">
            <summary>
            Action to be called in Owin pipeline.
            </summary>
            <param name="context">Current request's Owin envirnoment.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Owin.OwinContainerWrapper`1">
            <summary>
            Encapsulates Owin middleware to start from IOC container
            </summary>
            <typeparam name="T">Middleware type</typeparam>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinContainerWrapper`1.#ctor(Microsoft.Owin.OwinMiddleware,System.Web.Http.HttpConfiguration)">
            <summary>
            Initialize Owin wrapper
            </summary>
            <param name="next">Next owin middleware in the pipeline</param>
            <param name="config">Configuration that IOC is registered with.</param>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinContainerWrapper`1.Invoke(Microsoft.Owin.IOwinContext)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.OwinMiddlewareRequest">
            <summary>
            Represents the incoming side of an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initilize the middleware request from the <paramref name="environment"/>
            </summary>
            <param name="environment">Owin environment to set properties</param>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.Method">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.Path">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.PathBase">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.LocalIpAddress">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.RemoteIpAddress">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.GetQuery(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.Body">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.RequestUri">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.ReadFormAsync">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.OwinMiddlewareResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initilize the middleware response from the <paramref name="environment"/>
            </summary>
            <param name="environment">Owin environment to set properties</param>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.ContentType">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.Body">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.Redirect(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.SetExpire(System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicQueryable">
            <summary>
            Microsoft provided class. It allows dynamic string based querying. 
            Very handy when, at compile time, you don't know the type of queries that will be generated.
            </summary>
            
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicClass">
            <summary>
            Dynamic linq class
            </summary>
        </member>
        <member name="M:System.Linq.AutoPoco.DynamicClass.ToString">
            <summary>
             A string that represents the current object.
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:System.Linq.AutoPoco.ParseException">
            <summary>
            Dynamic Linq internal exception
            </summary>
        </member>
        <member name="T:AutoPoco.DependencyInjection.PreApplicationStart">
            <summary>
            Register IOC scope cleanup
            </summary>
        </member>
        <member name="M:AutoPoco.DependencyInjection.PreApplicationStart.Start">
            <summary>
            Register IOC scope cleanup
            </summary>
        </member>
    </members>
</doc>
