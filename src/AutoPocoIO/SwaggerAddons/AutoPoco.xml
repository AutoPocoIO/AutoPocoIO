<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoPocoIO</name>
    </assembly>
    <members>
        <member name="T:AutoPocoIO.Api.ISchemaOperations">
            <summary>
            API for access database schema structure.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ISchemaOperations.Definition(System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get schema structure.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns>Lists of all tables, views, and stored procedures.</returns>
        </member>
        <member name="T:AutoPocoIO.Api.IStoredProcedureOperations">
            <summary>
             API for accessings stored procedures.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get procedure parameters.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get detailed information about a specific parameter
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameterName">Name of parameter.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.ExecuteNoParameters(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute a stored procedure that uses no parameters
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Execute(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute a stored proecedure from webapi.  
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameters">Json representation of the parameters.</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IStoredProcedureOperations.Execute``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Execute web api from a view model 
            </summary>
            <typeparam name="TViewModel">Model of stored procedure parameters</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="procedureName">Name of procedure.</param>
            <param name="parameters">View model mapped parameters</param>
            <param name="loggingService">Optional. Log operation if not null.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Api.ITableOperations">
            <summary>
            Dynamicly access database tables
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.CreateNewRow(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">JSON object to insert</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>An instance of the object inserted</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.CreateNewRow``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Insert a recored into a given table
            </summary>
            <typeparam name="TViewModel">Type of view model</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">Object to insert into <paramref name="tableName"/></param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>An instance of the object inserted. </returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
             Describes the table and includes list of columns that exists in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>A description of <paramref name="tableName"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            View column attirbutes
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="columnName">Name of the column in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Column attributes</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.DeleteRow(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key(s)</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The removed object</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get all records from <paramref name="tableName"/>. Intended for WebAPI controller requests.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Optional. Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results and the connector max.</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Get all records from <paramref name="tableName"/> and projects the to a view model. Intended to be used as the initial part of a linq query.
            </summary>
            <typeparam name="TViewModel">Type to project the results to.</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>IQueryable of <typeparamref name="TViewModel"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetById(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieves a single record from a table by Primary Key. Note: for composite PKs,
            use a semicolon separated string.
            </summary>
            <param name="connectorName">The name of the connector to the table's schema.</param>
            <param name="tableName">The name of the table to retrieve the record from.</param>
            <param name="id">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="loggingService">LoggingService object to log the request. Null by default if no logging is required.</param>
            <returns>The record with matching PK. Null if not found.</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.GetById``1(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieves a single record from a table by Primary Key. Note: for composite PKs,
            use a semicolon separated string.
            </summary>
            <typeparam name="TViewModel">View Model Type</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.UpdateRow(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="keys">Primary key(s)</param>
            <param name="value">JSON object to update</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The updated object</returns>
        </member>
        <member name="M:AutoPocoIO.Api.ITableOperations.UpdateRow``1(System.String,System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key(s)</param>
            <param name="value">Object to updated in <paramref name="tableName"/></param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>The updated object</returns>
        </member>
        <member name="T:AutoPocoIO.Api.IViewOperations">
            <summary>
            Dynamicly access database views
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results</returns>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view and project them to <typeparamref name="TViewModel"/>
            </summary>
            <typeparam name="TViewModel">Type to project the results to.</typeparam>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>IQueryable of <typeparamref name="TViewModel"/></returns>
        </member>
        <member name="M:AutoPocoIO.Api.IViewOperations.GetAllAndRecordLimit(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
            <param name="loggingService">Include logging serivce to log this API call.</param>
            <returns>Dyanamic IQueryable of the results and the connector max.</returns>
        </member>
        <member name="T:AutoPocoIO.Api.SchemaOperations">
            <summary>
            View all schema objects
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.SchemaOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize schema operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
        </member>
        <member name="M:AutoPocoIO.Api.SchemaOperations.Definition(System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.StoredProcedureOperations">
            <summary>
             API for accessings stored procedures.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize store procedure operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector</param>
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.ExecuteNoParameters(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Execute(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Execute``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.StoredProcedureOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.TableOperations">
            <summary>
            Dynamicly access database tables
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.#ctor(AutoPocoIO.Factories.IResourceFactory,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Initialize table operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
            <param name="requestQuery">Get query string information for odata operations.</param>
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetById(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.GetById``1(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.CreateNewRow(System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.CreateNewRow``1(System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.UpdateRow(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.UpdateRow``1(System.String,System.String,System.String,``0,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.DeleteRow(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.Definition(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.TableOperations.Definition(System.String,System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Api.ViewOperations">
            <summary>
            Dynamicly access database views
            </summary>
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.#ctor(AutoPocoIO.Factories.IResourceFactory)">
            <summary>
            Initialize view operations with access to all registered resource types.
            </summary>
            <param name="resourceFactory">Get resource from the connector.</param>
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAllAndRecordLimit(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAll(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="M:AutoPocoIO.Api.ViewOperations.GetAll``1(System.String,System.String,AutoPocoIO.Services.ILoggingService)">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.Constants.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ApplicationIdMustBeGuid">
            <summary>
              Looks up a localized string similar to DashboardAppId is required and must be a GUID string..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ApplicationIdNotFound">
            <summary>
              Looks up a localized string similar to Error finding Application Id..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.AssemblyFoundWithNoTypes">
            <summary>
              Looks up a localized string similar to Assemblies found with no types loaded..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.CharToDbObjecType">
            <summary>
              Looks up a localized string similar to Parameter excpected to be &quot;U&quot; or &quot;V&quot;.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbAdapterNotFound">
            <summary>
              Looks up a localized string similar to The DbAdapter type requested is not found..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbObjectType">
            <summary>
              Looks up a localized string similar to Db object type must be a Table or View..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DbTypeNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a {0} database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.DependencyResolverMissing">
            <summary>
              Looks up a localized string similar to Configuration missing dependency resolver. Use an overload with service collection..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.HierarchyIdNotSupported">
            <summary>
              Looks up a localized string similar to EF Core does not support HierarchyId types yet..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.InvalidSqlDataType">
            <summary>
              Looks up a localized string similar to Invalid Sql Data Type..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.LoadDashboardCss">
            <summary>
              Looks up a localized string similar to Could not load manifest resource stream..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.MiddlewarePath">
            <summary>
              Looks up a localized string similar to Middleware path must start with a &apos;/&apos; followed by one or more characters..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.MySqlNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a MySQL database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.NoDbTypesRegistered">
            <summary>
              Looks up a localized string similar to No database types registered. Setup at least one database type in startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.OracleNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a Oracle database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.ServiceNotRegistered">
            <summary>
              Looks up a localized string similar to The requested service was not registered in startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.SqlNotRegistered">
            <summary>
              Looks up a localized string similar to The request is expecting a SQL database but it is not registered in Startup..
            </summary>
        </member>
        <member name="P:AutoPocoIO.Constants.ExceptionMessages.TypeNotSequence">
            <summary>
              Looks up a localized string similar to Type not a sequence..
            </summary>
        </member>
        <member name="T:AutoPocoIO.Constants.HttpMethodType">
            <summary>
            Http operations to be logged
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.GET">
            <summary>
            GET data operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.POST">
            <summary>
            Insert operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.PUT">
            <summary>
            Update operation
            </summary>
        </member>
        <member name="F:AutoPocoIO.Constants.HttpMethodType.DELETE">
            <summary>
            Delete operation
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.CompoundPrimaryKeyAttribute">
            <summary>
            Associates property with as a Primary key in a database table in OData
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.CompoundPrimaryKeyAttribute.Order">
            <summary>
            PK Order
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.DatabaseNameAttribute">
            <summary>
            Used by EF visit table to query across same server databases
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.DatabaseNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.DatabaseNameAttribute class
            </summary>
            <param name="databaseName">The name of the Database</param>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.DatabaseNameAttribute.DatabaseName">
            <summary>
            The name of the Database
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute">
            <summary>
            Prepend route prefix with dashboard prefix
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute.#ctor(System.String)">
            <summary>
            Sets prefix to "DashboardRoute/<paramref name="prefix"/>".
            </summary>
            <param name="prefix">Route Prefix</param>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.DynamicRoutePrefixAttribute.Prefix">
            <summary>
            Route prefix with dashboard path prepended.
            </summary>
        </member>
        <member name="T:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute">
            <summary>
            Specifies the referenced Database Object of a property
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.DbName">
            <summary>
            Database name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.SchemaName">
            <summary>
            Schema name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.TableName">
            <summary>
            Table name of the referenced database object
            </summary>
        </member>
        <member name="P:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.ColumnName">
            <summary>
            Column name (if referenced object is a column, null otherwise) of the referenced database object
            </summary>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.ReferencedDbObjectAttribute class (use when referenced object is a table, not a specific column)
            </summary>
            <param name="dbName">Database name of the referenced database object</param>
            <param name="schemaName">Schema name of the referenced database object</param>
            <param name="tableName">Table name of the referenced database object</param>
        </member>
        <member name="M:AutoPocoIO.CustomAttributes.ReferencedDbObjectAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoPoco.CustomAttributes.ReferencedDbObjectAttribute class (use when referenced object is a specific column)
            </summary>
            <param name="dbName">Database name of the referenced database object</param>
            <param name="schemaName">Schema name of the referenced database object</param>
            <param name="tableName">Table name of the referenced database object</param>
            <param name="columnName">Column name of the referenced database object</param>
        </member>
        <member name="T:AutoPocoIO.Dashboard.DashboardRoutes">
            <summary>
            Define routes with middleware dispatchers.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Dashboard.DashboardRoutes.Routes">
            <summary>
            Routes for middleware dashboard.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.DashboardRoutes.#ctor">
            <summary>
            Initialize Routes.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Extensions.ModelExtensions">
            <summary>
            Dashboard model extensions
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Extensions.ModelExtensions.FindValue``1(System.Collections.Generic.IDictionary{System.String,System.String[]},System.String)">
            <summary>
            Get value from form values
            </summary>
            <typeparam name="TProperty">Expected property type</typeparam>
            <param name="form">Form values</param>
            <param name="key">Form property name</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Extensions.ModelExtensions.GetString(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Get string value from Regex match
            </summary>
            <param name="match">Regex match</param>
            <param name="key">Group to parse to string</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.IRazorForm">
            <summary>
            Page containing a form.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.IRazorForm.SetForm(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            Read request form and set to dictionary
            </summary>
            <param name="values">Result dictionary</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.IRazorForm.Save">
            <summary>
            Execute command.
            </summary>
            <returns>Result dispatcher.</returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.ListConnectors">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.ConnectorCount">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Save(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.GetById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Insert(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Validate(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.ConnectorRepo.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.IConnectorRepo">
            <summary>
            CRUD operations for connectors in the dashboard
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.ConnectorCount">
            <summary>
            Total number of registered connectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.ListConnectors">
            <summary>
            List of connector information
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Save(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <summary>
            Update a connector
            </summary>
            <param name="model">Values to update connector.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.GetById(System.String)">
            <summary>
            Get a single connector
            </summary>
            <param name="id">Connector Id</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Insert(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel)">
            <summary>
            Insert a connector.
            </summary>
            <param name="model">Values to create a connector.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Validate(AutoPocoIO.Dashboard.ViewModels.ConnectorViewModel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Validate connector values on Insert/Update
            </summary>
            <param name="model">Values to validate</param>
            <param name="errors">Error dictionary to display</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IConnectorRepo.Delete(System.String)">
            <summary>
            Remove connector.
            </summary>
            <param name="id">Connector Id to remove.</param>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.IRequestHistoryRepo">
            <summary>
            Get information about request logs.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.IRequestHistoryRepo.ListRequest(System.Int32)">
            <summary>
            List requests information starting with the most recent.
            </summary>
            <param name="recordLimit">Number of records to return.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo">
            <summary>
             Get information about request logs.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo.#ctor(System.IServiceProvider,AutoPocoIO.Services.ITimeProvider)">
            <summary>
            Initialize repository.
            </summary>
            <param name="provider">Middleware scoped provider.</param>
            <param name="timeProvider">Server time information.</param>
        </member>
        <member name="M:AutoPocoIO.Dashboard.Repos.RequestHistoryRepo.ListRequest(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.DbContextBase">
            <summary>
            Dynamic schema context
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbContextBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Set up Virtual Entity relationships, Compund PKs and create Entity methods
            </summary>
            <param name="modelBuilder">Builder to add relationships to in this context</param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.DbSchema">
            <summary>
            Schema definition at request time
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.#ctor">
            <summary>
            Initalize schmea definition lists.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Tables">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Columns">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.Views">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.DbSchema.StoredProcedures">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.GetHashCode">
            <summary>
            Overall hash code for the request
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.DbSchema.Reset">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.IDbSchema">
            <summary>
            Schema definition at request time
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.IDbSchema.Reset">
            <summary>
            Clear <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Columns"/>, <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Tables"/>, <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Views"/>, and <see cref="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.StoredProcedures"/>
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Columns">
            <summary>
            List of found columns from all objects
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.StoredProcedures">
            <summary>
            Stored procedures found
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Tables">
            <summary>
            Tables found.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Db.IDbSchema.Views">
            <summary>
            Views found.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Db.ISchemaQueries">
            <summary>
            Methods to pull query for schema information from a database
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildColumns">
            <summary>
            List all requested database tables, views, and columns.
            </summary>
            <returns>string database query for tables, views, and columns.</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildStoredProcedureCommand">
            <summary>
            List all stored procedures
            </summary>
            <returns>string database query for stored procedures</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Db.ISchemaQueries.BuildTablesViewCommand">
            <summary>
            List all requested database tables, views.
            </summary>
            <returns>string database query for tables, views.</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Enums.ResourceType">
            <summary>
            Database Types
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Column">
            <summary>
            Details about a database column 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.Table">
            <summary>
            Parent table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.View">
            <summary>
            Parent view
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.TableSchema">
            <summary>
            Database schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.TableName">
            <summary>
            Database object name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnType">
            <summary>
            Data type
            </summary>
            <example>Varchar</example>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnLength">
            <summary>
            Data length
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ColumnIsNullable">
            <summary>
            Does the column allow nulls
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsComputed">
            <summary>
            Is the column a computed column
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKName">
            <summary>
            Name of the primary key, if the column is the primary key. 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKPosition">
            <summary>
            Primary key order
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.PKIsIdentity">
            <summary>
            Is the database responsible for creating the value on insert
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.FKName">
            <summary>
            Name of the forign key, if the column is referenced by another table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedDatabase">
            <summary>
            Database of the forign keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedSchema">
            <summary>
            Schema of the forgien keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedTable">
            <summary>
            Name of the forgien keyed table
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedColumn">
            <summary>
            Name of the column forgien keyed 
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.UserDefinedFKAlias">
            <summary>
            Forgien key name if defiend in the dashboard
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.DataType">
            <summary>
            Database and c# datatypes
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsPK">
            <summary>
            Flag denoting if the column the Primary key
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.IsFK">
            <summary>
            Flag denoting if the column is a forgien key
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Column.ReferencedVariableName">
            <summary>
            Full name of the forigen keyed table
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Column.ToString">
            <summary>
              A string that represents the current object.
            </summary>
            <returns>Column Name</returns>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Column.GetHashCode">
            <summary>
            Combined hash codes of Schema, Table, Column and ColumnType
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Config">
            <summary>
            Configuration settings for dynamically pulling DB objects
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Config.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.FilterSchema">
            <summary>
            Target schema.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedTable">
            <summary>
            Target table.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedStoredProcedure">
            <summary>
            Target stored procedure.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.ConnectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.PropertyPreFixName">
            <summary>
            Additional column prefix
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UserDefinedJoins">
            <summary>
            User created joins
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.DatabaseConnectorName">
            <summary>
            Connector name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.JoinsAsString">
            <summary>
            Formated user joins and virtual entity joins for schema call.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UsedConnectors">
            <summary>
            All connectors used to call database object.  Used to link crossmnType
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.Config">
            <summary>
            Configuration settings for dynamically pulling DB objects
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.Config.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.FilterSchema">
            <summary>
            Target schema.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedTable">
            <summary>
            Target table.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.IncludedStoredProcedure">
            <summary>
            Target stored procedure.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.ConnectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.PropertyPreFixName">
            <summary>
            Additional column prefix
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UserDefinedJoins">
            <summary>
            User created joins
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.DatabaseConnectorName">
            <summary>
            Connector name.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.JoinsAsString">
            <summary>
            Formated user joins and virtual entity joins for schema call.
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.Config.UsedConnectors">
            <summary>
            All connectors used to call database object.  Used to link cross database calls.
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.DataType">
            <summary>
            Combine the Database type and the C# type
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DataType.DbType">
            <summary>
            Database Type
            </summary>
        </member>
        <member name="P:AutoPocoIO.DynamicSchema.Models.DataType.SystemType">
            <summary>
            C# Type
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.DataType.ToString">
            <summary>
            Display both types
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.PocoBase">
            <summary>
            Base type for all dynamically generated database models
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.PocoBase.ToString">
            <summary>
            Cleanly show table name
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="E:AutoPocoIO.DynamicSchema.Models.PocoBase.PropertyChanged">
            <summary>
            Event delegate to show changers
            </summary>
        </member>
        <member name="M:AutoPocoIO.DynamicSchema.Models.PocoBase.OnRaisePropertyChanged(System.Object,System.String)">
            <summary>
            Raise the on change event
            </summary>
            <param name="sender">Dbcontext</param>
            <param name="PropertyName">Column name</param>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Models.View">
            <summary>
            Created for clarity
            </summary>
        </member>
        <member name="T:AutoPocoIO.DynamicSchema.Services.CrossDb.RelationalQueryModelVisitor">
            <summary>
                The default relational <see cref="T:Remotion.Linq.QueryModel" /> visitor.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Exceptions.BaseCaughtException">
            <summary>
            Base exception to show in logger
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.DynamicObjectExtensions.GroupJoin``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0},System.String,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T">dynamic list</typeparam>
            <param name="outer">outer side of the join</param>
            <param name="inner">inner side of the join</param>
            <param name="outerSelector">key value to join on. Example 1: outer.id, Example 2: new(outer.id, outer.name) </param>
            <param name="innerSelector">key value to join on. Example 1: inner.id, Example 2: new(inner.id, inner.name)</param>
            <param name="resultsSelector">How to display results. Example : new(group as Address, outer.name as Homeowner)</param>
            <param name="values">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ResourceExtensions.ProjectResultSet``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Maps a result set to a view model
            </summary>
            <typeparam name="TViewModel">View Model type</typeparam>
            <param name="outputParameters">Output from the stored procedure execution.</param>
            <param name="parameterName">Name of the parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is not found or not a result set.</exception>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.SchemaBuilderExtensions.SetObjectType(System.String)">
             <summary>
             Convert db result to DbObject Enum
             </summary>
             <param name="objectType">string value from Db</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
             <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.ServiceCollectionExtensions.ConfigureApplicationDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
            Used for provider specific configuration.
            </summary>
            <param name="services"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.AppBuilderExtensions">
            <summary>
            AspNet Core Extenstions to set up the dashboard 
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Default dashboard set up for with dash prefix "/autopoco"
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseAutoPoco(Microsoft.AspNetCore.Builder.IApplicationBuilder,AutoPocoIO.Models.AutoPocoOptions)">
            <summary>
            Set up the dashboard
            </summary>
            <param name="builder">The builder being used to configure the context.</param>
            <param name="options">Dashboard setup options</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:AutoPocoIO.Extensions.AppBuilderExtensions.UseMiddlewareWhen``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Object[])">
            <summary>
            Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline.
            </summary>
            <param name="builder"></param>
            <param name="pathMatch"></param>
            <param name="args">Additional middleware consturctor values</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.RouteExtensions">
            <summary>
            Http Route extensions
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.RouteExtensions.GetQueryStrings(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets HttpRequest query string values
            </summary>
            <param name="request">Current Http Request</param>
            <returns>Key/Value pair of query strings</returns>
        </member>
        <member name="T:AutoPocoIO.Extensions.ServicesCollectionExtensions">
            <summary>
            Configure AspNet Core Services 
            </summary>
        </member>
        <member name="M:AutoPocoIO.Extensions.ServicesCollectionExtensions.AddAutoPoco(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Include Swagger and Odata services 
            </summary>
            <param name="services">The services being used to configure the context.</param>
            <returns>The services collection so that further configuration can be chained.</returns>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareContext">
            <summary>
             Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.Request">
            <summary>
            Http request information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.Response">
            <summary>
            Http response information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.UriMatch">
            <summary>
            Regex match to dispatcher
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.RequestUri">
            <summary>
            Request uri
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.QueryStrings">
            <summary>
            Request query strings
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareContext.InternalServiceProvider">
            <summary>
            Scoped middleware service provider
            </summary>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareRequest">
            <summary>
            Represents the incoming side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Method">
            <summary>
            Gets the HTTP method.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Path">
            <summary>
             Gets the request path from RequestPath.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.PathBase">
            <summary>
             Gets the RequestPathBase.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.LocalIpAddress">
            <summary>
            Gets the request local IP address
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.RemoteIpAddress">
            <summary>
            Gets the request remote IP address
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareRequest.GetQuery(System.String)">
            <summary>
             Gets the query value collection parsed from Request QueryString
            </summary>
            <param name="key">The query string key to search for</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareRequest.ReadFormAsync">
            <summary>
            Reads the request body if it is a form.
            </summary>
            <returns>Key/Value pair of the form values</returns>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.RequestUri">
             <summary>
            Returns the combined components of the request URL in a fully escaped form suitable
            for use in HTTP headers and other HTTP operations.
             </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareRequest.Body">
            <summary>
             Gets the RequestBody Stream.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Middleware.IMiddlewareResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.ContentType">
            <summary>
            Gets or sets the value for the Content-Type response header.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.StatusCode">
            <summary>
            Gets or sets the HTTP response code.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Middleware.IMiddlewareResponse.Body">
            <summary>
            Gets or sets the response body <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.SetExpire(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set <c>"Expires"</c> key in header dictionary
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.WriteAsync(System.String)">
            <summary>
             Writes the given text to the response body. UTF-8 encoding will be used.
            </summary>
            <param name="text">The text to write to the response.</param>
            <returns>A task that represents the completion of the write operation.</returns>
        </member>
        <member name="M:AutoPocoIO.Middleware.IMiddlewareResponse.Redirect(System.String)">
            <summary>
             Returns a temporary redirect response (HTTP 302) to the client.
            </summary>
            <param name="location"> The URL to redirect the client to. This must be properly encoded for use in http
                headers where only ASCII characters are allowed.</param>
        </member>
        <member name="T:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext">
            <summary>
             Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,System.IServiceProvider)">
            <summary>
            Initialize for each http request
            </summary>
            <param name="httpContext">Http request context</param>
            <param name="internalProvider">Scoped middleware service provider</param>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.Request">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.Response">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.UriMatch">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.RequestUri">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.QueryStrings">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareContext.InternalServiceProvider">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest">
            <summary>
            Represents the incoming side of an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Initilize the middleware request from the <paramref name="context"/>
            </summary>
            <param name="context">HttpContext to set properties</param>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.Method">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.Path">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.PathBase">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.LocalIpAddress">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.RemoteIpAddress">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.GetQuery(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.RequestUri">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.Body">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareRequest.ReadFormAsync">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Initilize the middleware response from the <paramref name="context"/>
            </summary>
            <param name="context">HttpContext to set properties</param>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.ContentType">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.Body">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.SetExpire(System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Middleware.AspNetCoreMiddlewareResponse.Redirect(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Models.AutoPocoOptions">
            <summary>
            Middileware set up options
            </summary>
        </member>
        <member name="M:AutoPocoIO.Models.AutoPocoOptions.#ctor">
            <summary>
            Default set up.
            UseDashboard = true.
            DashboardPath = "/autopoco".
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.AutoPocoOptions.DashboardPath">
            <summary>
            Route for dashboard.  DEfaults to /autopoco
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.AutoPocoOptions.UseDashboard">
            <summary>
            Flag to enable dashboard middleware. True by defaut.
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.ColumnDefinition">
            <summary>
            Database column information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Name">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Type">
            <summary>
            Database type
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.Length">
            <summary>
            Max length of the column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsNullable">
            <summary>
            Does the column allow null values
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsPrimaryKey">
            <summary>
            Is the column the primary key or one of the primary keys
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsForigenKey">
            <summary>
            Is attached to a forigen key constrant
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedDatabase">
            <summary>
            Forigen key table's database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedSchema">
            <summary>
            Forigen key table's schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedTable">
            <summary>
            Forigen key table name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.ReferencedColumn">
            <summary>
            Forigen key column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsComputed">
            <summary>
            Is the column definition a computed column
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.ColumnDefinition.IsPrimaryKeyIdentity">
            <summary>
            Flag to specify that the column is a primary key identiy column
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.SchemaDefinition">
            <summary>
            Information about the database schema
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.ConnectorId">
            <summary>
            Database id for the connector
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.ConnectorName">
            <summary>
            Alias of the connector
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Name">
            <summary>
            Schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.DbName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Tables">
            <summary>
            List of available table names
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.Views">
            <summary>
            List of available view names
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.SchemaDefinition.StoredProcedures">
            <summary>
            List of available stored procedure names
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.StoredProcedureDefinition">
            <summary>
            Information about a given stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureDefinition.Name">
            <summary>
            Store procedure name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureDefinition.Parameters">
            <summary>
            List of stored procedure parameter definitions
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.StoredProcedureParameterDefinition">
            <summary>
            Properties of a stored procedure parameter
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.Type">
            <summary>
            Database type of the parameter value
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.IsOutput">
            <summary>
            Is the parameter an output of the stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.StoredProcedureParameterDefinition.IsNullable">
            <summary>
            Does the procedure except null as a value
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.TableDefinition">
            <summary>
            Database table information
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.ConnectorId">
            <summary>
            AutoPoco connector id
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.ConnectorName">
            <summary>
            AutoPoco connector name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.SchemaName">
            <summary>
            Database schema name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.DbName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.Name">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:AutoPocoIO.Models.TableDefinition.Columns">
            <summary>
            List of table column details
            </summary>
        </member>
        <member name="T:AutoPocoIO.Models.UserJoinConfiguration">
            <summary>
            Flatten User Join information
            </summary>
        </member>
        <member name="T:AutoPocoIO.Resources.IOperationResource">
            <summary>
            Dynamic database access.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DbSchema">
            <summary>
            Schema definition.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.Config">
            <summary>
            Request configuration.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.Connector">
            <summary>
            Request database connector.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DatabaseName">
            <summary>
            Requested database.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.DbObjectName">
            <summary>
            Requested database object.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.SchemaName">
            <summary>
            Requested schema.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.IOperationResource.ResourceType">
            <summary>
            Database type.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider)">
            <summary>
            Register resouce specific services.
            </summary>
            <param name="serviceCollection">Resource service collection.</param>
            <param name="rootProvider">Application service provider.</param>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ConfigureAction(AutoPocoIO.Models.Connector,AutoPocoIO.DynamicSchema.Enums.OperationType,System.String)">
            <summary>
            Configure resource operation
            </summary>
            <param name="connector">Request connector</param>
            <param name="dbAction">Operations type (read, write, delete)</param>
            <param name="dbObjectName">Database object to be accessed.</param>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.CreateNewResourceRecord``1(``0)">
            <summary>
            Insert a recored into a given table.
            </summary>
            <typeparam name="TViewModel">Type of view model</typeparam>
            <param name="value">Object to insert into <see cref="P:AutoPocoIO.Resources.IOperationResource.DbObjectName"/> </param>
            <returns>An instance of the object inserted.</returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.CreateNewResourceRecord(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="value">Object to insert into <see cref="P:AutoPocoIO.Resources.IOperationResource.DbObjectName"/> </param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.DeleteResourceRecordById(System.String)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="keys">Primary Key(s)</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.ExecuteProc(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Execute the configured stored procedure
            </summary>
            <param name="parameterDictionary">Key/Value pair of input and output parameters</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecordById(System.String)">
            <summary>
            Retrieves a single record from a table by Primary Key.
            </summary>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecordById``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Retrieves a single record from a table by Primary Key.
            </summary>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <param name="queryString">Request query string to apply odata filters.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetResourceRecords(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Retrieves all records in a table
            </summary>
            <param name="queryString">Request query string to apply odata filters.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetViewRecords">
            <summary>
            Retrieves all records in a view
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadDbAdapter">
            <summary>
            Initialize database schema for a specific object
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.UpdateResourceRecordById(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Update a single record from a table by Primary Key.
            </summary>
            <param name="value">JSON object to update.</param>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.UpdateResourceRecordById``1(``0,System.String)">
            <summary>
            Update a single record from a table by Primary Key.
            </summary>
            <typeparam name="TViewModel">Model of the table columns</typeparam>
            <param name="value">Column values to update.</param>
            <param name="keys">The primary key value of the record to be retrieved as a string. 
            For composite keys, use semicolon separated string</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetColumnDefinition(System.String)">
            <summary>
            View column attirbutes
            </summary>
            <param name="columnName">Name of the column in the database.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetSchemaDefinition">
            <summary>
            List all database objects
            </summary>
            <returns>A list for each object type (Table, View, Stored Procedure)</returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetStoredProcedureDefinition">
            <summary>
            List all parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetStoredProcedureDefinition(System.String)">
            <summary>
             Get a single parameter
            </summary>
            <param name="parameterName">Parameters name in the database</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.GetTableDefinition">
            <summary>
            List of columns that exists in a given table
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadSchema">
            <summary>
            Load full schema
            </summary>
        </member>
        <member name="M:AutoPocoIO.Resources.IOperationResource.LoadProc">
            <summary>
            Load schema for a specific stored procedure
            </summary>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.Connector">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DatabaseName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.SchemaName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DbObjectName">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.DbSchema">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.Config">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Resources.OperationResource.ResourceType">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ConfigureAction(AutoPocoIO.Models.Connector,AutoPocoIO.DynamicSchema.Enums.OperationType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.CreateNewResourceRecord``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.CreateNewResourceRecord(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecordById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecordById``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetResourceRecords(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.UpdateResourceRecordById``1(``0,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.UpdateResourceRecordById(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.DeleteResourceRecordById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetViewRecords">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.ListSchemas">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetColumnDefinition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetSchemaDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetStoredProcedureDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetStoredProcedureDefinition(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.GetTableDefinition">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadProc">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadDbAdapter">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Resources.OperationResource.LoadSchema">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.AppDatabaseSetupService.SetupEncryption(System.String,System.String,System.Int32)">
            <summary>
            Set the encryption settings
            </summary>
            <param name="encryptionSalt">Must be length 16</param>
            <param name="encryptionSecretKey">Must be 128 characters</param>
            <param name="cacheTimeoutMinutes">Length in minutes how long database configuration values stay in cache.</param>
        </member>
        <member name="T:AutoPocoIO.Services.ILoggingService">
            <summary>
            Log resource operation calls
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.LogCount">
            <summary>
            Number of operations ready to log
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.Exception">
            <summary>
            Request exception
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.StatusCode">
            <summary>
            Request status code
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.ResponseTime">
            <summary>
            UTC time of response
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ILoggingService.Ip">
            <summary>
            Requester's IP address
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddSchemaToLogger(System.String)">
            <summary>
            Add schema operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddSprocToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <summary>
            Add stored procedure operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored procedure name</param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <summary>
            Add table operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Table name</param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType,System.String)">
            <summary>
            Add table row operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName"></param>
            <param name="httpMethod">Http method type(GET, PUT, POST, DELETE)</param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddViewToLogger(System.String,System.String)">
            <summary>
            Add view operation to be logged.
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">View name</param>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.LogAll">
            <summary>
            Log all pending operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.Services.ILoggingService.AddContextInfomation(AutoPocoIO.LoggingMiddleware.ContextLogParameters)">
            <summary>
            Add Http request information to the service
            </summary>
            <param name="logParameters">Http request parameters to log.</param>
        </member>
        <member name="T:AutoPocoIO.Services.ITimeProvider">
            <summary>
            Get server and UTC date times.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.UtcNow">
            <summary>
            UTC date and time now
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.Now">
            <summary>
            Server date and time now
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.ITimeProvider.LocalToday">
            <summary>
            Server date time at 00:00:00 UTC
            </summary>
        </member>
        <member name="T:AutoPocoIO.Services.LoggingService">
            <summary>
            Log AutoPoco commands
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.#ctor(AutoPocoIO.Services.ITimeProvider,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
             Set up new logging for a request
            This constructor is not meant to be called in code.  Used for DI. 
            </summary>
            <param name="timeProvider">Localized time provider.</param>
            <param name="scopeFactory">Create to service scope for of thread logging.</param>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.ApiRequests">
            <summary>
            List of request to be logged
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.ResponseTime">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.Ip">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.Exception">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.LogCount">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.OnLogging">
            <summary>
             Represents an event called for each api request
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.LoggingService.OnLogged">
            <summary>
             Represents an event called after the http request is logged 
            </summary>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddTableToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddViewToLogger(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddSprocToLogger(System.String,System.String,AutoPocoIO.Constants.HttpMethodType)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddSchemaToLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.LogAll">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddContextInfomation(AutoPocoIO.LoggingMiddleware.ContextLogParameters)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Services.LoggingService.AddApiRequest(AutoPocoIO.Models.LoggingApiContextValues,System.DateTime)">
            <summary>
            Appended an API request to be logged
            </summary>
            <param name="values">Request infomation</param>
            <param name="requestTime">Time of request</param>
        </member>
        <member name="T:AutoPocoIO.Services.DefaultTimeProvider">
            <summary>
            Get server and UTC date times.
            </summary>
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.UtcNow">
            <inheritdoc />
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.Now">
            <inheritdoc />
        </member>
        <member name="P:AutoPocoIO.Services.DefaultTimeProvider.LocalToday">
            <inheritdoc />
        </member>
        <member name="T:AutoPocoIO.SwaggerAddons.JTokenExample">
            <summary>
            Gives example object for JToken parameters in swagger
            </summary>
        </member>
        <member name="T:AutoPocoIO.SwaggerAddons.ODataParametersSwaggerDefinition">
            <summary>
            Adds the supported odata parameters for IQueryable endpoints 
            ONLY if no parameters are defined already.
            </summary>
        </member>
        <member name="T:AutoPocoIO.WebApi.SchemaController">
            <summary>
            Schema Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.SchemaController.#ctor(AutoPocoIO.Api.ISchemaOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="schemaOperations">Access schema definitions operations</param>
            <param name="loggingService">Logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.SchemaController.Get(System.String)">
            <summary>
            List all database objects
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <returns>A list for each object type (Table, View, Stored Procedure)</returns>
        </member>
        <member name="T:AutoPocoIO.WebApi.StoredProcedureController">
            <summary>
            Execute Stored Procedures
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.#ctor(AutoPocoIO.Api.IStoredProcedureOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="storedProcedureOperations">Access stored procedures</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.Get(System.String,System.String)">
            <summary>
            Execute Stored Procedure (No Params)
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureController.Post(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Execute Stored Procedure (Params)
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
            <param name="value">JSON object of parameters.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.StoredProcedureDefinitionController">
            <summary>
            Stored Procedure Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.#ctor(AutoPocoIO.Api.IStoredProcedureOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.Get(System.String,System.String)">
            <summary>
            List all parameters
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.StoredProcedureDefinitionController.Get(System.String,System.String,System.String)">
            <summary>
            Get a single parameter
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="sprocName">Stored Procedure name in the database.</param>
            <param name="paramName">Parameters name in the database</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.TableDefinitionController">
            <summary>
            Table Definition End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.#ctor(AutoPocoIO.Api.ITableOperations,AutoPocoIO.Services.ILoggingService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="tableOperations">Access tables</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.Get(System.String,System.String)">
            <summary>
            List of columns that exists in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TableDefinitionController.Get(System.String,System.String,System.String)">
            <summary>
            View column attirbutes
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="columnName">Name of the column in the database.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.TablesController">
            <summary>
            Table Operation End Points
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.#ctor(AutoPocoIO.Api.ITableOperations,AutoPocoIO.Services.ILoggingService,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Default constructor
            </summary>
            <param name="tableOps">Database table operation</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
            <param name="queryStringService">Injected service to read http request information</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Get(System.String,System.String)">
            <summary>
            Retrieve data from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Get(System.String,System.String,System.String)">
            <summary>
            Retrieve single row by primary key
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary key.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Post(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Insert a recored into a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="value">JSON object to insert</param>
            <returns>Inserted object</returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Put(System.String,System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Update record in a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary Key.</param>
            <param name="value">JSON object to update.</param>
            <returns></returns>
        </member>
        <member name="M:AutoPocoIO.WebApi.TablesController.Delete(System.String,System.String,System.String)">
            <summary>
            Remove record from a given table
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="tableName">Name of the table in the database.</param>
            <param name="id">Primary key.</param>
            <returns></returns>
        </member>
        <member name="T:AutoPocoIO.WebApi.ViewsController">
            <summary>
            View Operations End Point
            </summary>
        </member>
        <member name="M:AutoPocoIO.WebApi.ViewsController.#ctor(AutoPocoIO.Api.IViewOperations,AutoPocoIO.Services.ILoggingService,AutoPocoIO.Services.IRequestQueryStringService)">
            <summary>
            Default constructor with logging injected
            </summary>
            <param name="viewOperations">Access view data</param>
            <param name="loggingService">Dependency injected logging for all end points</param>
            <param name="queryStringService">Injected service to read http request information</param>
        </member>
        <member name="M:AutoPocoIO.WebApi.ViewsController.Get(System.String,System.String)">
            <summary>
            Retrieve data from a given view
            </summary>
            <param name="connectorName">Name of the database to access.</param>
            <param name="viewName">Name of the view in the database.</param>
        </member>
        <member name="T:AutoPocoIO.WebApi.ApiController">
            <summary>
            For same naming between .Net Framework and .Net Core
            </summary>
        </member>
        <member name="T:AutoPocoIO.LoggingMiddleware.ContextLogParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.Context">
            <summary>
             Gets or sets the <see cref="P:Microsoft.AspNetCore.Http.HttpResponse.HttpContext"/> for this request.
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.StatusCode">
            <summary>
            Gets or sets the HTTP response code.
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.Exception">
            <summary>
            Request exception to log
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.RequestBuffer">
            <summary>
            Buffered Request body stream
            </summary>
        </member>
        <member name="P:AutoPocoIO.LoggingMiddleware.ContextLogParameters.ResponseBuffer">
            <summary>
            Buffered Response body stream
            </summary>
        </member>
        <member name="T:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware">
            <summary>
            ASP.NET Core middleware for logging request and responses
            </summary>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initialize middleware on startup
            </summary>
            <param name="next">Next middleware in the pipeline</param>
        </member>
        <member name="M:AutoPocoIO.LoggingMiddleware.LogRequestAndResponseMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,AutoPocoIO.Services.ILoggingService)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="loggingService"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicQueryable">
            <summary>
            Microsoft provided class. It allows dynamic string based querying. 
            Very handy when, at compile time, you don't know the type of queries that will be generated.
            </summary>
            
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicClass">
            <summary>
            Dynamic linq class
            </summary>
        </member>
        <member name="M:System.Linq.AutoPoco.DynamicClass.ToString">
            <summary>
             A string that represents the current object.
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:System.Linq.AutoPoco.ParseException">
            <summary>
            Dynamic Linq internal exception
            </summary>
        </member>
    </members>
</doc>
.RemoteIpAddress">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.GetQuery(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.Body">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareRequest.RequestUri">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.ReadFormAsync">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareRequest.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AutoPocoIO.Owin.OwinMiddlewareResponse">
            <summary>
            Represents the outgoing side of an individual HTTP request.
            </summary>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initilize the middleware response from the <paramref name="environment"/>
            </summary>
            <param name="environment">Owin environment to set properties</param>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.ContentType">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:AutoPocoIO.Owin.OwinMiddlewareResponse.Body">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.Redirect(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.SetExpire(System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:AutoPocoIO.Owin.OwinMiddlewareResponse.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicQueryable">
            <summary>
            Microsoft provided class. It allows dynamic string based querying. 
            Very handy when, at compile time, you don't know the type of queries that will be generated.
            </summary>
            
        </member>
        <member name="T:System.Linq.AutoPoco.DynamicClass">
            <summary>
            Dynamic linq class
            </summary>
        </member>
        <member name="M:System.Linq.AutoPoco.DynamicClass.ToString">
            <summary>
             A string that represents the current object.
            </summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:System.Linq.AutoPoco.ParseException">
            <summary>
            Dynamic Linq internal exception
            </summary>
        </member>
    </members>
</doc>
